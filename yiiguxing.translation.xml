<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="592" />
    <option name="newTranslationDialogX" value="815" />
    <option name="newTranslationDialogY" value="455" />
    <histories>
      <item value="The System property name of Standalone mode" />
      <item value="The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the serve" />
      <item value="attempt Authentication" />
      <item value="Authentication Event Publisher" />
      <item value="undertow" />
      <item value="authenticate" />
      <item value="Leave this request open until a refresh has made the contents of this request visible to search. This refresh policy is compatible with high indexing and search throughput but it causes the request to wait to reply until a refresh occurs." />
      <item value="Don't refresh after this request. The default." />
      <item value="Force a refresh as part of this request. This refresh policy does not scale for high indexing or search throughput but is useful to present a consistent view to for indices with very low traffic. And it is wonderful for tests!" />
      <item value="Adds either a delete or an index request." />
      <item value="Doc Write Request" />
      <item value="@param client The client that executes the bulk operations @param listener The BulkProcessor listener that gets called on bulk events @return the builder for BulkProcessor @deprecated Use {@link builder(java.util.function.BiConsumer, org.elasticsearch.action.bulk.BulkProcessor.Listener)} with client::bulk as the first argument, or {@link builder(org.elasticsearch.client.Client, org.elasticsearch.action.bulk.BulkProcessor.Listener, org.elasticsearch.threadpool.Scheduler, org.elasticsearch.threadpool.Scheduler, java.lang.Runnable)} and manage the flush and retry schedulers explicitly" />
      <item value="&quot;Executing bulk [{}] with {} requests" />
      <item value="includes" />
      <item value="filtering" />
      <item value="excludes" />
      <item value="profiles" />
      <item value="min Idle" />
      <item value="Possibly consider using a shorter maxLifetime value." />
      <item value="leakDetectionThreshold is less than 2000ms or more than maxLifetime" />
      <item value="pool Name" />
      <item value="maxLifetime is less than 30000ms, setting to default {}ms" />
      <item value="lifetime" />
      <item value="No operations allowed after connection closed." />
      <item value="Could not open JDBC Connection for transaction; nested exception is java.sql.SQLTransientConnectionException: HikariPool-1 - Connection is not available, request timed out after 30049ms." />
      <item value=": Could not open JDBC Connection for transaction; nested exception is java.sql.SQLTransientConnectionException: HikariPool-1 - Connection is not available, request timed out after 30049ms." />
      <item value="Idle State Event" />
      <item value="an {@link IdleStateEvent} whose state is {@link IdleStateREADER_IDLE} will be triggered when no read was performed for the specified period of time. Specify {@code 0} to disable." />
      <item value="READER IDLE" />
      <item value="SECONDS" />
      <item value="an {@link IdleStateEvent} whose state is {@link IdleStateALL_IDLE} will be triggered when neither read nor write was performed for the specified period of time. Specify {@code 0} to disable." />
      <item value="an {@link IdleStateEvent} whose state is {@link IdleStateWRITER_IDLE} will be triggered when no write was performed for the specified period of time. Specify {@code 0} to disable." />
      <item value="@param readerIdleTimeSeconds an {@link IdleStateEvent} whose state is {@link IdleStateREADER_IDLE} will be triggered when no read was performed for the specified period of time. Specify {@code 0} to disable. @param writerIdleTimeSeconds an {@link IdleStateEvent} whose state is {@link IdleStateWRITER_IDLE} will be triggered when no write was performed for the specified period of time. Specify {@code 0} to disable. @param allIdleTimeSeconds an {@link IdleStateEvent} whose state is {@link IdleStateALL_IDLE} will be triggered when neither read nor write was performed for the specified period of time. Specify {@code 0} to disable." />
      <item value="all Idle Time Seconds" />
      <item value="reader Idle Time Seconds" />
      <item value="writer Idle Time Seconds" />
      <item value="idle" />
      <item value="Reconnected to redis.ondev.top:36379" />
      <item value="Column 'id' in field list is ambiguous" />
      <item value="HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@615ec0c6 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value." />
      <item value="Redis command timed out; nested exception is io.lettuce.core.RedisCommandTimeoutException: Command timed out after 10 second(s)" />
      <item value="pre Authentication Check" />
      <item value="add Interceptors" />
      <item value="Service Web Mvc Configurer" />
      <item value="register Module" />
      <item value="Json Auto Detect" />
      <item value="include Field Names" />
      <item value="WRITE ONLY" />
      <item value="PROTECTED" />
      <item value="exclude" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="207" />
        <entry key="ENGLISH" value="208" />
        <entry key="FRENCH" value="3" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="HEBREW" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1623338045824" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20210111000668505" />
      </app-key>
    </option>
  </component>
</application>